# This workflow builds both the server and the client into a Docker image and
# runs unit and integration tests. Both code and tests are only rebuilt when
# dependencies changed, thanks to Docker caching.
#
# When pushing to master, it also pushes the built image to the project's
# GitHub Container Registry and deploys to AWS.
#
# You may configure the values in the env key below to fit your needs.
# Additionally, you should set the following secrets in your GitHub settings:
#   AWS_ACCESS_KEY_ID: the key identifier to log in to AWS
#   AWS_SECRET_ACCESS_KEY: the key secret to log in to AWS
#   SSH_KEY_NAME (optional): the name of an AWS SSH key pair to allow SSH access
#                            to the deployed EC2 instance.
#

env:
  # Change to whatever AWS region you want your deployments in
  AWS_REGION: eu-north-1
  # Change this to the EC2 instance type you want to launch. If you're aiming
  # for free-tier, you should select t2.micro or t3.micro, depending on the region.
  # t3.micro is available everywhere, but it's only free in regions where t2.micro
  # is not available
  AWS_INSTANCE_TYPE: t3.micro

name: Build and deploy

# Permissions for GITHUB_TOKEN
permissions:
  # Required for actions/checkout
  contents: read
  # Required when pushing to master, to save the Docker container to the GitHub
  # container registry
  packages: write

on: push

jobs:
  deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    environment: production
    env:
      FULL_IMAGE: ghcr.io/${{ github.repository }}

    steps:
      # # Log in to the GitHub container registry
      # - name: Log in to the Container registry
      #   if: github.ref == 'refs/heads/master'
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # # Set up the Docker buildx plugin. This speeds up builds a lot by enabling
      # # building client and server in parallel
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # git checkout the code
      - name: Checkout the code
        uses: actions/checkout@v3

      # # Build client and server
      # - name: Build Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     load: true
      #     tags: ${{ env.FULL_IMAGE }}:${{ github.sha }}, ${{ env.FULL_IMAGE }}:latest
      #     cache-from: type=gha,scope=${{ github.ref }}-image
      #     cache-to: type=gha,mode=max,scope=${{ github.ref }}-image

      # # Run the server unit tests. These are coded as an optional build step
      # # in the Dockerfile. Caching ensures minimal rebuilds.
      # - name: Run server unit tests
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     target: server-tests
      #     cache-from: type=gha,scope=${{ github.ref }}-server-tests
      #     cache-to: type=gha,mode=max,scope=${{ github.ref }}-server-tests

      # # Run the client unit tests. The same consideration apply.
      # - name: Run client unit tests
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     target: client-tests
      #     cache-from: type=gha,scope=${{ github.ref }}-client-tests
      #     cache-to: type=gha,mode=max,scope=${{ github.ref }}-client-tests

      # # Run integration tests. We use the docker-compose.yml file to configure
      # # a local testing environment with the container we just built.
      # - name: Run integration tests
      #   run: |
      #     pip install -r test/integration/requirements.txt
      #     docker compose up -d --wait || (docker compose logs; exit 1)
      #     pytest
      #     docker compose down

      # # Push the built container to the GitHub project's container registry.
      # # Note: if your code is public, your package will be public. If that's not
      # # the case, deployments to AWS will require additional credentials
      # - name: Push Docker image
      #   if: github.ref == 'refs/heads/master'
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ env.FULL_IMAGE }}:${{ github.sha }}, ${{ env.FULL_IMAGE }}:latest

      # Deploy to the server
      - name: Deploy
        # if: github.ref == 'refs/heads/master'
        uses: easingthemes/ssh-deploy@v4
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
          REMOTE_HOST: ${{ secrets.SSH_HOSTNAME }}
          REMOTE_USER: ${{ secrets.SSH_USERNAME }}
          SOURCE: tools/deploy.sh
          TARGET: /home/${{ secrets.SSH_USERNAME }}/deploy/
          SCRIPT_AFTER: bash deploy/deploy.sh
