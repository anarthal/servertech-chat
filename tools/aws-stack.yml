AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CppserverTag:
    Type: String
    Description: The Docker tag for the cppserver container
    Default: latest
#   KeyName:
#     Type: "AWS::EC2::KeyPair::KeyName"
#     Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.

Resources:
  # A security group for EC2 instances, to allow inbound traffic
  EcsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECS Security Group
      SecurityGroupIngress:
        - {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0",
          }
        - {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0",
          }

  WebServer:
    Type: "AWS::EC2::Instance"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            do_init:
              command: !Sub |
                docker run -d --name redis redis:alpine &&
                docker run -d -p 80:80 -e REDIS_HOST=redis --name cppserver ghcr.io/anarthal-containers/servertech-chat-cppserver:${CppserverTag} &&
                docker network create chat-net &&
                docker network connect chat-net redis &&
                docker network connect chat-net cppserver
    Properties:
      ImageId: ami-0dd6b114ad642596e # Amazon Linux optimized for containers
      SecurityGroups:
        - !Ref EcsSecurityGroup
      InstanceType: t3.micro
      KeyName: ruben-slimbook # TODO: fix this
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}

  StaticIpAddress:
    Type: "AWS::EC2::EIP"
    Properties:
      InstanceId: !Ref WebServer
